schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  disasterDescriptive(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): disasterDescriptive
  disasterDescriptives(
    skip: Int = 0
    first: Int = 100
    orderBy: disasterDescriptive_orderBy
    orderDirection: OrderDirection
    where: disasterDescriptive_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [disasterDescriptive!]!
  beneficiary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): beneficiary
  beneficiaries(
    skip: Int = 0
    first: Int = 100
    orderBy: beneficiary_orderBy
    orderDirection: OrderDirection
    where: beneficiary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [beneficiary!]!
  fundReleaseDescriptive(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): fundReleaseDescriptive
  fundReleaseDescriptives(
    skip: Int = 0
    first: Int = 100
    orderBy: fundReleaseDescriptive_orderBy
    orderDirection: OrderDirection
    where: fundReleaseDescriptive_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [fundReleaseDescriptive!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: claim_orderBy
    orderDirection: OrderDirection
    where: claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [claim!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  disasterDescriptive(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): disasterDescriptive
  disasterDescriptives(
    skip: Int = 0
    first: Int = 100
    orderBy: disasterDescriptive_orderBy
    orderDirection: OrderDirection
    where: disasterDescriptive_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [disasterDescriptive!]!
  beneficiary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): beneficiary
  beneficiaries(
    skip: Int = 0
    first: Int = 100
    orderBy: beneficiary_orderBy
    orderDirection: OrderDirection
    where: beneficiary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [beneficiary!]!
  fundReleaseDescriptive(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): fundReleaseDescriptive
  fundReleaseDescriptives(
    skip: Int = 0
    first: Int = 100
    orderBy: fundReleaseDescriptive_orderBy
    orderDirection: OrderDirection
    where: fundReleaseDescriptive_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [fundReleaseDescriptive!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: claim_orderBy
    orderDirection: OrderDirection
    where: claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [claim!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type beneficiary {
  """the beneficiary address"""
  id: ID!
  """name of the beneficiary organization"""
  name: String!
  """all fund releases received by this beneficiary"""
  receivedFunds(skip: Int = 0, first: Int = 100, orderBy: fundReleaseDescriptive_orderBy, orderDirection: OrderDirection, where: fundReleaseDescriptive_filter): [fundReleaseDescriptive!]!
  """total amount received across all disasters"""
  totalAmountReceived: BigInt!
  """total number of fund releases received"""
  totalFundReleases: BigInt!
  """disasters for which beneficiary received funds"""
  disasters(skip: Int = 0, first: Int = 100, orderBy: disasterDescriptive_orderBy, orderDirection: OrderDirection, where: disasterDescriptive_filter): [disasterDescriptive!]!
}

input beneficiary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  receivedFunds_: fundReleaseDescriptive_filter
  totalAmountReceived: BigInt
  totalAmountReceived_not: BigInt
  totalAmountReceived_gt: BigInt
  totalAmountReceived_lt: BigInt
  totalAmountReceived_gte: BigInt
  totalAmountReceived_lte: BigInt
  totalAmountReceived_in: [BigInt!]
  totalAmountReceived_not_in: [BigInt!]
  totalFundReleases: BigInt
  totalFundReleases_not: BigInt
  totalFundReleases_gt: BigInt
  totalFundReleases_lt: BigInt
  totalFundReleases_gte: BigInt
  totalFundReleases_lte: BigInt
  totalFundReleases_in: [BigInt!]
  totalFundReleases_not_in: [BigInt!]
  disasters: [String!]
  disasters_not: [String!]
  disasters_contains: [String!]
  disasters_contains_nocase: [String!]
  disasters_not_contains: [String!]
  disasters_not_contains_nocase: [String!]
  disasters_: disasterDescriptive_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [beneficiary_filter]
  or: [beneficiary_filter]
}

enum beneficiary_orderBy {
  id
  name
  receivedFunds
  totalAmountReceived
  totalFundReleases
  disasters
}

type claim {
  """fund release id + chain id"""
  id: ID!
  """chain id where claim was made"""
  chainId: BigInt!
  """fund release associated with this claim"""
  fundReleaseDescriptive: fundReleaseDescriptive!
  """tokens claimed (0: Native, 1: WETH, 2: USDC, 3: USDT)"""
  tokens: [Int!]!
  """amounts claimed for each token"""
  amounts: [BigInt!]!
}

input claim_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  fundReleaseDescriptive: String
  fundReleaseDescriptive_not: String
  fundReleaseDescriptive_gt: String
  fundReleaseDescriptive_lt: String
  fundReleaseDescriptive_gte: String
  fundReleaseDescriptive_lte: String
  fundReleaseDescriptive_in: [String!]
  fundReleaseDescriptive_not_in: [String!]
  fundReleaseDescriptive_contains: String
  fundReleaseDescriptive_contains_nocase: String
  fundReleaseDescriptive_not_contains: String
  fundReleaseDescriptive_not_contains_nocase: String
  fundReleaseDescriptive_starts_with: String
  fundReleaseDescriptive_starts_with_nocase: String
  fundReleaseDescriptive_not_starts_with: String
  fundReleaseDescriptive_not_starts_with_nocase: String
  fundReleaseDescriptive_ends_with: String
  fundReleaseDescriptive_ends_with_nocase: String
  fundReleaseDescriptive_not_ends_with: String
  fundReleaseDescriptive_not_ends_with_nocase: String
  fundReleaseDescriptive_: fundReleaseDescriptive_filter
  tokens: [Int!]
  tokens_not: [Int!]
  tokens_contains: [Int!]
  tokens_contains_nocase: [Int!]
  tokens_not_contains: [Int!]
  tokens_not_contains_nocase: [Int!]
  amounts: [BigInt!]
  amounts_not: [BigInt!]
  amounts_contains: [BigInt!]
  amounts_contains_nocase: [BigInt!]
  amounts_not_contains: [BigInt!]
  amounts_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [claim_filter]
  or: [claim_filter]
}

enum claim_orderBy {
  id
  chainId
  fundReleaseDescriptive
  fundReleaseDescriptive__id
  fundReleaseDescriptive__attestationId
  fundReleaseDescriptive__comments
  fundReleaseDescriptive__amountInUSD
  fundReleaseDescriptive__hyperlaneMessageId
  fundReleaseDescriptive__transactionHash
  tokens
  amounts
}

type disasterDescriptive {
  """the id of the disaster"""
  id: ID!
  """name of the disaster"""
  name: String!
  """description of the disaster"""
  description: String!
  """type of disaster (earthquake, flood, etc.)"""
  disasterType: String!
  """location where disaster occurred"""
  location: String!
  """timestamp when disaster was created"""
  createdAt: BigInt!
  """total funds needed for disaster relief"""
  fundsNeeded: BigInt!
  """ENS name associated with the disaster"""
  ensName: String!
  """Base account name associated with the disaster"""
  baseName: String!
  """address of the vault created for this disaster"""
  vaultAddress: Bytes!
  """attestation id for this disaster creation"""
  attestationId: BigInt!
  """transaction hash in which disaster was created"""
  transactionHash: Bytes!
  """hyperlane message id for this disaster"""
  hyperlaneMessageId: Bytes!
  """all fund releases associated with this disaster"""
  fundReleases(skip: Int = 0, first: Int = 100, orderBy: fundReleaseDescriptive_orderBy, orderDirection: OrderDirection, where: fundReleaseDescriptive_filter): [fundReleaseDescriptive!]!
  """total funds released for this disaster"""
  totalFundsReleased: BigInt!
  """total number of beneficiaries who received funds"""
  totalBeneficiaries: BigInt!
}

input disasterDescriptive_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  disasterType: String
  disasterType_not: String
  disasterType_gt: String
  disasterType_lt: String
  disasterType_gte: String
  disasterType_lte: String
  disasterType_in: [String!]
  disasterType_not_in: [String!]
  disasterType_contains: String
  disasterType_contains_nocase: String
  disasterType_not_contains: String
  disasterType_not_contains_nocase: String
  disasterType_starts_with: String
  disasterType_starts_with_nocase: String
  disasterType_not_starts_with: String
  disasterType_not_starts_with_nocase: String
  disasterType_ends_with: String
  disasterType_ends_with_nocase: String
  disasterType_not_ends_with: String
  disasterType_not_ends_with_nocase: String
  location: String
  location_not: String
  location_gt: String
  location_lt: String
  location_gte: String
  location_lte: String
  location_in: [String!]
  location_not_in: [String!]
  location_contains: String
  location_contains_nocase: String
  location_not_contains: String
  location_not_contains_nocase: String
  location_starts_with: String
  location_starts_with_nocase: String
  location_not_starts_with: String
  location_not_starts_with_nocase: String
  location_ends_with: String
  location_ends_with_nocase: String
  location_not_ends_with: String
  location_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  fundsNeeded: BigInt
  fundsNeeded_not: BigInt
  fundsNeeded_gt: BigInt
  fundsNeeded_lt: BigInt
  fundsNeeded_gte: BigInt
  fundsNeeded_lte: BigInt
  fundsNeeded_in: [BigInt!]
  fundsNeeded_not_in: [BigInt!]
  ensName: String
  ensName_not: String
  ensName_gt: String
  ensName_lt: String
  ensName_gte: String
  ensName_lte: String
  ensName_in: [String!]
  ensName_not_in: [String!]
  ensName_contains: String
  ensName_contains_nocase: String
  ensName_not_contains: String
  ensName_not_contains_nocase: String
  ensName_starts_with: String
  ensName_starts_with_nocase: String
  ensName_not_starts_with: String
  ensName_not_starts_with_nocase: String
  ensName_ends_with: String
  ensName_ends_with_nocase: String
  ensName_not_ends_with: String
  ensName_not_ends_with_nocase: String
  baseName: String
  baseName_not: String
  baseName_gt: String
  baseName_lt: String
  baseName_gte: String
  baseName_lte: String
  baseName_in: [String!]
  baseName_not_in: [String!]
  baseName_contains: String
  baseName_contains_nocase: String
  baseName_not_contains: String
  baseName_not_contains_nocase: String
  baseName_starts_with: String
  baseName_starts_with_nocase: String
  baseName_not_starts_with: String
  baseName_not_starts_with_nocase: String
  baseName_ends_with: String
  baseName_ends_with_nocase: String
  baseName_not_ends_with: String
  baseName_not_ends_with_nocase: String
  vaultAddress: Bytes
  vaultAddress_not: Bytes
  vaultAddress_gt: Bytes
  vaultAddress_lt: Bytes
  vaultAddress_gte: Bytes
  vaultAddress_lte: Bytes
  vaultAddress_in: [Bytes!]
  vaultAddress_not_in: [Bytes!]
  vaultAddress_contains: Bytes
  vaultAddress_not_contains: Bytes
  attestationId: BigInt
  attestationId_not: BigInt
  attestationId_gt: BigInt
  attestationId_lt: BigInt
  attestationId_gte: BigInt
  attestationId_lte: BigInt
  attestationId_in: [BigInt!]
  attestationId_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  hyperlaneMessageId: Bytes
  hyperlaneMessageId_not: Bytes
  hyperlaneMessageId_gt: Bytes
  hyperlaneMessageId_lt: Bytes
  hyperlaneMessageId_gte: Bytes
  hyperlaneMessageId_lte: Bytes
  hyperlaneMessageId_in: [Bytes!]
  hyperlaneMessageId_not_in: [Bytes!]
  hyperlaneMessageId_contains: Bytes
  hyperlaneMessageId_not_contains: Bytes
  fundReleases_: fundReleaseDescriptive_filter
  totalFundsReleased: BigInt
  totalFundsReleased_not: BigInt
  totalFundsReleased_gt: BigInt
  totalFundsReleased_lt: BigInt
  totalFundsReleased_gte: BigInt
  totalFundsReleased_lte: BigInt
  totalFundsReleased_in: [BigInt!]
  totalFundsReleased_not_in: [BigInt!]
  totalBeneficiaries: BigInt
  totalBeneficiaries_not: BigInt
  totalBeneficiaries_gt: BigInt
  totalBeneficiaries_lt: BigInt
  totalBeneficiaries_gte: BigInt
  totalBeneficiaries_lte: BigInt
  totalBeneficiaries_in: [BigInt!]
  totalBeneficiaries_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [disasterDescriptive_filter]
  or: [disasterDescriptive_filter]
}

enum disasterDescriptive_orderBy {
  id
  name
  description
  disasterType
  location
  createdAt
  fundsNeeded
  ensName
  baseName
  vaultAddress
  attestationId
  transactionHash
  hyperlaneMessageId
  fundReleases
  totalFundsReleased
  totalBeneficiaries
}

type fundReleaseDescriptive {
  """disaster id + beneficiary address + attestation id"""
  id: ID!
  """disaster associated with this fund release"""
  disaster: disasterDescriptive!
  """beneficiary who received the funds"""
  beneficiary: beneficiary!
  """attestation id for this fund release"""
  attestationId: BigInt!
  """comments provided during fund release"""
  comments: String!
  """total USD amount released"""
  amountInUSD: BigInt!
  """hyperlane message id for this fund claim"""
  hyperlaneMessageId: Bytes!
  """claims made across different chains"""
  claims(skip: Int = 0, first: Int = 100, orderBy: claim_orderBy, orderDirection: OrderDirection, where: claim_filter): [claim!]!
  """transaction hash in which funds were released"""
  transactionHash: Bytes!
}

input fundReleaseDescriptive_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  disaster: String
  disaster_not: String
  disaster_gt: String
  disaster_lt: String
  disaster_gte: String
  disaster_lte: String
  disaster_in: [String!]
  disaster_not_in: [String!]
  disaster_contains: String
  disaster_contains_nocase: String
  disaster_not_contains: String
  disaster_not_contains_nocase: String
  disaster_starts_with: String
  disaster_starts_with_nocase: String
  disaster_not_starts_with: String
  disaster_not_starts_with_nocase: String
  disaster_ends_with: String
  disaster_ends_with_nocase: String
  disaster_not_ends_with: String
  disaster_not_ends_with_nocase: String
  disaster_: disasterDescriptive_filter
  beneficiary: String
  beneficiary_not: String
  beneficiary_gt: String
  beneficiary_lt: String
  beneficiary_gte: String
  beneficiary_lte: String
  beneficiary_in: [String!]
  beneficiary_not_in: [String!]
  beneficiary_contains: String
  beneficiary_contains_nocase: String
  beneficiary_not_contains: String
  beneficiary_not_contains_nocase: String
  beneficiary_starts_with: String
  beneficiary_starts_with_nocase: String
  beneficiary_not_starts_with: String
  beneficiary_not_starts_with_nocase: String
  beneficiary_ends_with: String
  beneficiary_ends_with_nocase: String
  beneficiary_not_ends_with: String
  beneficiary_not_ends_with_nocase: String
  beneficiary_: beneficiary_filter
  attestationId: BigInt
  attestationId_not: BigInt
  attestationId_gt: BigInt
  attestationId_lt: BigInt
  attestationId_gte: BigInt
  attestationId_lte: BigInt
  attestationId_in: [BigInt!]
  attestationId_not_in: [BigInt!]
  comments: String
  comments_not: String
  comments_gt: String
  comments_lt: String
  comments_gte: String
  comments_lte: String
  comments_in: [String!]
  comments_not_in: [String!]
  comments_contains: String
  comments_contains_nocase: String
  comments_not_contains: String
  comments_not_contains_nocase: String
  comments_starts_with: String
  comments_starts_with_nocase: String
  comments_not_starts_with: String
  comments_not_starts_with_nocase: String
  comments_ends_with: String
  comments_ends_with_nocase: String
  comments_not_ends_with: String
  comments_not_ends_with_nocase: String
  amountInUSD: BigInt
  amountInUSD_not: BigInt
  amountInUSD_gt: BigInt
  amountInUSD_lt: BigInt
  amountInUSD_gte: BigInt
  amountInUSD_lte: BigInt
  amountInUSD_in: [BigInt!]
  amountInUSD_not_in: [BigInt!]
  hyperlaneMessageId: Bytes
  hyperlaneMessageId_not: Bytes
  hyperlaneMessageId_gt: Bytes
  hyperlaneMessageId_lt: Bytes
  hyperlaneMessageId_gte: Bytes
  hyperlaneMessageId_lte: Bytes
  hyperlaneMessageId_in: [Bytes!]
  hyperlaneMessageId_not_in: [Bytes!]
  hyperlaneMessageId_contains: Bytes
  hyperlaneMessageId_not_contains: Bytes
  claims_: claim_filter
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [fundReleaseDescriptive_filter]
  or: [fundReleaseDescriptive_filter]
}

enum fundReleaseDescriptive_orderBy {
  id
  disaster
  disaster__id
  disaster__name
  disaster__description
  disaster__disasterType
  disaster__location
  disaster__createdAt
  disaster__fundsNeeded
  disaster__ensName
  disaster__baseName
  disaster__vaultAddress
  disaster__attestationId
  disaster__transactionHash
  disaster__hyperlaneMessageId
  disaster__totalFundsReleased
  disaster__totalBeneficiaries
  beneficiary
  beneficiary__id
  beneficiary__name
  beneficiary__totalAmountReceived
  beneficiary__totalFundReleases
  attestationId
  comments
  amountInUSD
  hyperlaneMessageId
  claims
  transactionHash
}