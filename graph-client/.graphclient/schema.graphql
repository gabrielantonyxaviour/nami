schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  disaster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): disaster
  disasters(
    skip: Int = 0
    first: Int = 100
    orderBy: disaster_orderBy
    orderDirection: OrderDirection
    where: disaster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [disaster!]!
  beneficiary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): beneficiary
  beneficiaries(
    skip: Int = 0
    first: Int = 100
    orderBy: beneficiary_orderBy
    orderDirection: OrderDirection
    where: beneficiary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [beneficiary!]!
  funding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): funding
  fundings(
    skip: Int = 0
    first: Int = 100
    orderBy: funding_orderBy
    orderDirection: OrderDirection
    where: funding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [funding!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: claim_orderBy
    orderDirection: OrderDirection
    where: claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [claim!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  disaster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): disaster
  disasters(
    skip: Int = 0
    first: Int = 100
    orderBy: disaster_orderBy
    orderDirection: OrderDirection
    where: disaster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [disaster!]!
  beneficiary(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): beneficiary
  beneficiaries(
    skip: Int = 0
    first: Int = 100
    orderBy: beneficiary_orderBy
    orderDirection: OrderDirection
    where: beneficiary_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [beneficiary!]!
  funding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): funding
  fundings(
    skip: Int = 0
    first: Int = 100
    orderBy: funding_orderBy
    orderDirection: OrderDirection
    where: funding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [funding!]!
  claim(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): claim
  claims(
    skip: Int = 0
    first: Int = 100
    orderBy: claim_orderBy
    orderDirection: OrderDirection
    where: claim_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [claim!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type beneficiary {
  """beneficiary address"""
  id: ID!
  """fundings received by this beneficiary"""
  fundings(skip: Int = 0, first: Int = 100, orderBy: funding_orderBy, orderDirection: OrderDirection, where: funding_filter): [funding!]!
  """total funding amount received in USD"""
  totalReceivedAmount: BigInt!
  """total number of fundings received"""
  totalFundingsReceived: BigInt!
  """total number of claims initiated"""
  totalClaimsInitiated: BigInt!
}

input beneficiary_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fundings_: funding_filter
  totalReceivedAmount: BigInt
  totalReceivedAmount_not: BigInt
  totalReceivedAmount_gt: BigInt
  totalReceivedAmount_lt: BigInt
  totalReceivedAmount_gte: BigInt
  totalReceivedAmount_lte: BigInt
  totalReceivedAmount_in: [BigInt!]
  totalReceivedAmount_not_in: [BigInt!]
  totalFundingsReceived: BigInt
  totalFundingsReceived_not: BigInt
  totalFundingsReceived_gt: BigInt
  totalFundingsReceived_lt: BigInt
  totalFundingsReceived_gte: BigInt
  totalFundingsReceived_lte: BigInt
  totalFundingsReceived_in: [BigInt!]
  totalFundingsReceived_not_in: [BigInt!]
  totalClaimsInitiated: BigInt
  totalClaimsInitiated_not: BigInt
  totalClaimsInitiated_gt: BigInt
  totalClaimsInitiated_lt: BigInt
  totalClaimsInitiated_gte: BigInt
  totalClaimsInitiated_lte: BigInt
  totalClaimsInitiated_in: [BigInt!]
  totalClaimsInitiated_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [beneficiary_filter]
  or: [beneficiary_filter]
}

enum beneficiary_orderBy {
  id
  fundings
  totalReceivedAmount
  totalFundingsReceived
  totalClaimsInitiated
}

type claim {
  """funding id + chain id + index"""
  id: ID!
  """the funding this claim belongs to"""
  funding: funding!
  """chain id where claim is to be processed"""
  chainId: BigInt!
  """array of token indices"""
  tokens: [BigInt!]!
  """array of token amounts"""
  amounts: [BigInt!]!
  """transaction hash of claim initiation"""
  transactionHash: Bytes!
}

input claim_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  funding: String
  funding_not: String
  funding_gt: String
  funding_lt: String
  funding_gte: String
  funding_lte: String
  funding_in: [String!]
  funding_not_in: [String!]
  funding_contains: String
  funding_contains_nocase: String
  funding_not_contains: String
  funding_not_contains_nocase: String
  funding_starts_with: String
  funding_starts_with_nocase: String
  funding_not_starts_with: String
  funding_not_starts_with_nocase: String
  funding_ends_with: String
  funding_ends_with_nocase: String
  funding_not_ends_with: String
  funding_not_ends_with_nocase: String
  funding_: funding_filter
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  tokens: [BigInt!]
  tokens_not: [BigInt!]
  tokens_contains: [BigInt!]
  tokens_contains_nocase: [BigInt!]
  tokens_not_contains: [BigInt!]
  tokens_not_contains_nocase: [BigInt!]
  amounts: [BigInt!]
  amounts_not: [BigInt!]
  amounts_contains: [BigInt!]
  amounts_contains_nocase: [BigInt!]
  amounts_not_contains: [BigInt!]
  amounts_not_contains_nocase: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [claim_filter]
  or: [claim_filter]
}

enum claim_orderBy {
  id
  funding
  funding__id
  funding__amountInUSD
  funding__claimed
  funding__attestationId
  funding__transactionHash
  chainId
  tokens
  amounts
  transactionHash
}

type disaster {
  """the disaster id"""
  id: ID!
  """attestation id for the disaster"""
  attestationId: Bytes!
  """vault address created for the disaster"""
  vaultAddress: Bytes!
  """estimated requirement in USD"""
  estimatedRequirementInUSD: BigInt!
  """all fundings allocated for this disaster"""
  fundings(skip: Int = 0, first: Int = 100, orderBy: funding_orderBy, orderDirection: OrderDirection, where: funding_filter): [funding!]!
  """total funding amount allocated in USD"""
  totalFundingAmount: BigInt!
  """total number of beneficiaries"""
  totalBeneficiaries: BigInt!
  """transaction hash of disaster creation"""
  transactionHash: Bytes!
}

input disaster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  attestationId: Bytes
  attestationId_not: Bytes
  attestationId_gt: Bytes
  attestationId_lt: Bytes
  attestationId_gte: Bytes
  attestationId_lte: Bytes
  attestationId_in: [Bytes!]
  attestationId_not_in: [Bytes!]
  attestationId_contains: Bytes
  attestationId_not_contains: Bytes
  vaultAddress: Bytes
  vaultAddress_not: Bytes
  vaultAddress_gt: Bytes
  vaultAddress_lt: Bytes
  vaultAddress_gte: Bytes
  vaultAddress_lte: Bytes
  vaultAddress_in: [Bytes!]
  vaultAddress_not_in: [Bytes!]
  vaultAddress_contains: Bytes
  vaultAddress_not_contains: Bytes
  estimatedRequirementInUSD: BigInt
  estimatedRequirementInUSD_not: BigInt
  estimatedRequirementInUSD_gt: BigInt
  estimatedRequirementInUSD_lt: BigInt
  estimatedRequirementInUSD_gte: BigInt
  estimatedRequirementInUSD_lte: BigInt
  estimatedRequirementInUSD_in: [BigInt!]
  estimatedRequirementInUSD_not_in: [BigInt!]
  fundings_: funding_filter
  totalFundingAmount: BigInt
  totalFundingAmount_not: BigInt
  totalFundingAmount_gt: BigInt
  totalFundingAmount_lt: BigInt
  totalFundingAmount_gte: BigInt
  totalFundingAmount_lte: BigInt
  totalFundingAmount_in: [BigInt!]
  totalFundingAmount_not_in: [BigInt!]
  totalBeneficiaries: BigInt
  totalBeneficiaries_not: BigInt
  totalBeneficiaries_gt: BigInt
  totalBeneficiaries_lt: BigInt
  totalBeneficiaries_gte: BigInt
  totalBeneficiaries_lte: BigInt
  totalBeneficiaries_in: [BigInt!]
  totalBeneficiaries_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [disaster_filter]
  or: [disaster_filter]
}

enum disaster_orderBy {
  id
  attestationId
  vaultAddress
  estimatedRequirementInUSD
  fundings
  totalFundingAmount
  totalBeneficiaries
  transactionHash
}

type funding {
  """funding id"""
  id: ID!
  """the disaster this funding belongs to"""
  disaster: disaster!
  """the beneficiary receiving the funding"""
  beneficiary: beneficiary!
  """array of claims across chains"""
  claims(skip: Int = 0, first: Int = 100, orderBy: claim_orderBy, orderDirection: OrderDirection, where: claim_filter): [claim!]!
  """total funding amount in USD"""
  amountInUSD: BigInt!
  """whether funding has been claimed"""
  claimed: Boolean!
  """attestation id for funding approval"""
  attestationId: Bytes!
  """transaction hash of funding unlock"""
  transactionHash: Bytes!
}

input funding_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  disaster: String
  disaster_not: String
  disaster_gt: String
  disaster_lt: String
  disaster_gte: String
  disaster_lte: String
  disaster_in: [String!]
  disaster_not_in: [String!]
  disaster_contains: String
  disaster_contains_nocase: String
  disaster_not_contains: String
  disaster_not_contains_nocase: String
  disaster_starts_with: String
  disaster_starts_with_nocase: String
  disaster_not_starts_with: String
  disaster_not_starts_with_nocase: String
  disaster_ends_with: String
  disaster_ends_with_nocase: String
  disaster_not_ends_with: String
  disaster_not_ends_with_nocase: String
  disaster_: disaster_filter
  beneficiary: String
  beneficiary_not: String
  beneficiary_gt: String
  beneficiary_lt: String
  beneficiary_gte: String
  beneficiary_lte: String
  beneficiary_in: [String!]
  beneficiary_not_in: [String!]
  beneficiary_contains: String
  beneficiary_contains_nocase: String
  beneficiary_not_contains: String
  beneficiary_not_contains_nocase: String
  beneficiary_starts_with: String
  beneficiary_starts_with_nocase: String
  beneficiary_not_starts_with: String
  beneficiary_not_starts_with_nocase: String
  beneficiary_ends_with: String
  beneficiary_ends_with_nocase: String
  beneficiary_not_ends_with: String
  beneficiary_not_ends_with_nocase: String
  beneficiary_: beneficiary_filter
  claims_: claim_filter
  amountInUSD: BigInt
  amountInUSD_not: BigInt
  amountInUSD_gt: BigInt
  amountInUSD_lt: BigInt
  amountInUSD_gte: BigInt
  amountInUSD_lte: BigInt
  amountInUSD_in: [BigInt!]
  amountInUSD_not_in: [BigInt!]
  claimed: Boolean
  claimed_not: Boolean
  claimed_in: [Boolean!]
  claimed_not_in: [Boolean!]
  attestationId: Bytes
  attestationId_not: Bytes
  attestationId_gt: Bytes
  attestationId_lt: Bytes
  attestationId_gte: Bytes
  attestationId_lte: Bytes
  attestationId_in: [Bytes!]
  attestationId_not_in: [Bytes!]
  attestationId_contains: Bytes
  attestationId_not_contains: Bytes
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [funding_filter]
  or: [funding_filter]
}

enum funding_orderBy {
  id
  disaster
  disaster__id
  disaster__attestationId
  disaster__vaultAddress
  disaster__estimatedRequirementInUSD
  disaster__totalFundingAmount
  disaster__totalBeneficiaries
  disaster__transactionHash
  beneficiary
  beneficiary__id
  beneficiary__totalReceivedAmount
  beneficiary__totalFundingsReceived
  beneficiary__totalClaimsInitiated
  claims
  amountInUSD
  claimed
  attestationId
  transactionHash
}