type ethToken @entity {
  "ethToken contract address"
  id: ID!

  "ethToken name"
  name: String!

  "ethToken symbol"
  symbol: String!

  "all transfers of this ethToken"
  transfers: [ethTransfer!]! @derivedFrom(field: "token")
}

type ethAccount @entity {
  "account address"
  id: ID!
  "transfers where this account is the sender"
  transfersOut: [ethTransfer!]! @derivedFrom(field: "from")
  "transfers where this account is the receiver"
  transfersIn: [ethTransfer!]! @derivedFrom(field: "to")
  "balances for each ethToken"
  balances: [ethBalance!]! @derivedFrom(field: "account")
}

type ethBalance @entity {
  "account address + ethToken address"
  id: ID!
  "the account that holds the balance"
  account: ethAccount!
  "the token"
  token: ethToken!
  "the vault if this balance belongs to one"
  vault: ethVault
  "current balance"
  amount: BigInt!
  "block number of last update"
  lastUpdateBlock: BigInt!
  "timestamp of last update"
  lastUpdateTimestamp: BigInt!
}

type ethTransfer @entity {
  "transaction hash + log index"
  id: ID!
  "the ethToken being transferred"
  token: ethToken!
  "sender address"
  from: ethAccount!
  "receiver address"
  to: ethAccount!
  "vault if this is a vault deposit"
  vault: ethVault
  "amount transferred"
  amount: BigInt!
  "block number"
  blockNumber: BigInt!
  "block timestamp"
  timestamp: BigInt!
  "transaction hash"
  transactionHash: Bytes!
}

type ethVault @entity {
  "vault address"
  id: ID!
  "deposits received by this vault"
  deposits: [ethTransfer!]! @derivedFrom(field: "vault")
  "total value locked in vault per ethToken"
  tokenBalances: [ethBalance!]! @derivedFrom(field: "vault")
  "total number of depositors"
  totalDepositors: BigInt!
  "total value locked across all tokens"
  totalValueLocked: BigInt!
}
