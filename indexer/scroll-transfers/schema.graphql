type scrollToken @entity {
  "scrollToken contract address"
  id: ID!

  "scrollToken name"
  name: String!

  "scrollToken symbol"
  symbol: String!

  "all transfers of this scrollToken"
  transfers: [scrollTransfer!]! @derivedFrom(field: "token")
}

type scrollAccount @entity {
  "scrollAccount address"
  id: ID!
  "transfers where this scrollAccount is the sender"
  transfersOut: [scrollTransfer!]! @derivedFrom(field: "from")
  "transfers where this scrollAccount is the receiver"
  transfersIn: [scrollTransfer!]! @derivedFrom(field: "to")
  "balances for each scrollToken"
  balances: [scrollBalance!]! @derivedFrom(field: "account")
}

type scrollBalance @entity {
  "scrollAccount address + scrollToken address"
  id: ID!
  "the scrollAccount that holds the scrollBalance"
  account: scrollAccount!
  "the scrollToken"
  token: scrollToken!
  "the scrollVault if this scrollBalance belongs to one"
  vault: scrollVault
  "current scrollBalance"
  amount: BigInt!
  "block number of last update"
  lastUpdateBlock: BigInt!
  "timestamp of last update"
  lastUpdateTimestamp: BigInt!
}

type scrollTransfer @entity {
  "transaction hash + log index"
  id: ID!
  "the scrollToken being transferred"
  token: scrollToken!
  "sender address"
  from: scrollAccount!
  "receiver address"
  to: scrollAccount!
  "scrollVault if this is a scrollVault deposit"
  vault: scrollVault
  "amount transferred"
  amount: BigInt!
  "block number"
  blockNumber: BigInt!
  "block timestamp"
  timestamp: BigInt!
  "transaction hash"
  transactionHash: Bytes!
}

type scrollVault @entity {
  "scrollVault address"
  id: ID!
  "deposits received by this scrollVault"
  deposits: [scrollTransfer!]! @derivedFrom(field: "vault")
  "total value locked in scrollVault per scrollToken"
  tokenBalances: [scrollBalance!]! @derivedFrom(field: "vault")
  "total number of depositors"
  totalDepositors: BigInt!
  "total value locked across all tokens"
  totalValueLocked: BigInt!
}
