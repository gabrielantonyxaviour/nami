type baseToken @entity {
  "token contract address"
  id: ID!

  "token name"
  name: String!

  "token symbol"
  symbol: String!

  "all transfers of this token"
  transfers: [baseTransfer!]! @derivedFrom(field: "token")
}

type baseAccount @entity {
  "account address"
  id: ID!
  "transfers where this account is the sender"
  transfersOut: [baseTransfer!]! @derivedFrom(field: "from")
  "transfers where this account is the receiver"
  transfersIn: [baseTransfer!]! @derivedFrom(field: "to")
  "balances for each token"
  balances: [baseBalance!]! @derivedFrom(field: "account")
}

type baseBalance @entity {
  "account address + token address"
  id: ID!
  "the account that holds the baseBalance"
  account: baseAccount!
  "the token"
  token: baseToken!
  "the vault if this baseBalance belongs to one"
  vault: baseVault
  "current baseBalance"
  amount: BigInt!
  "block number of last update"
  lastUpdateBlock: BigInt!
  "timestamp of last update"
  lastUpdateTimestamp: BigInt!
}

type baseTransfer @entity {
  "transaction hash + log index"
  id: ID!
  "the token being transferred"
  token: baseToken!
  "sender address"
  from: baseAccount!
  "receiver address"
  to: baseAccount!
  "vault if this is a vault deposit"
  vault: baseVault
  "amount transferred"
  amount: BigInt!
  "block number"
  blockNumber: BigInt!
  "block timestamp"
  timestamp: BigInt!
  "transaction hash"
  transactionHash: Bytes!
}

type baseVault @entity {
  "vault address"
  id: ID!
  "deposits received by this vault"
  deposits: [baseTransfer!]! @derivedFrom(field: "vault")
  "total value locked in vault per token"
  tokenBalances: [baseBalance!]! @derivedFrom(field: "vault")
  "total number of depositors"
  totalDepositors: BigInt!
  "total value locked across all tokens"
  totalValueLocked: BigInt!
}
