type polToken @entity {
  "polToken contract address"
  id: ID!

  "polToken name"
  name: String!

  "polToken symbol"
  symbol: String!

  "all transfers of this polToken"
  transfers: [polTransfer!]! @derivedFrom(field: "token")
}

type polAccount @entity {
  "polAccount address"
  id: ID!
  "transfers where this polAccount is the sender"
  transfersOut: [polTransfer!]! @derivedFrom(field: "from")
  "transfers where this polAccount is the receiver"
  transfersIn: [polTransfer!]! @derivedFrom(field: "to")
  "balances for each polToken"
  balances: [polBalance!]! @derivedFrom(field: "account")
}

type polBalance @entity {
  "polAccount address + polToken address"
  id: ID!
  "the polAccount that holds the polBalance"
  account: polAccount!
  "the polToken"
  token: polToken!
  "the polVault if this polBalance belongs to one"
  vault: polVault
  "current polBalance"
  amount: BigInt!
  "block number of last update"
  lastUpdateBlock: BigInt!
  "timestamp of last update"
  lastUpdateTimestamp: BigInt!
}

type polTransfer @entity {
  "transaction hash + log index"
  id: ID!
  "the polToken being transferred"
  token: polToken!
  "sender address"
  from: polAccount!
  "receiver address"
  to: polAccount!
  "polVault if this is a polVault deposit"
  vault: polVault
  "amount transferred"
  amount: BigInt!
  "block number"
  blockNumber: BigInt!
  "block timestamp"
  timestamp: BigInt!
  "transaction hash"
  transactionHash: Bytes!
}

type polVault @entity {
  "polVault address"
  id: ID!
  "deposits received by this polVault"
  deposits: [polTransfer!]! @derivedFrom(field: "vault")
  "total value locked in polVault per polToken"
  tokenBalances: [polBalance!]! @derivedFrom(field: "vault")
  "total number of depositors"
  totalDepositors: BigInt!
  "total value locked across all tokens"
  totalValueLocked: BigInt!
}
